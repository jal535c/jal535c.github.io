define(["require","exports","../accUtils","knockout","text!../../js/treeViewData.json","ojs/ojarraytreedataprovider","ojs/ojkeyset","ojs/ojknockout","ojs/ojinputtext","ojs/ojtoolbar","ojs/ojbutton","ojs/ojtreeview"],(function(require,e,t,s,i,o,d){"use strict";return class{constructor(){this.createNestedObservableArray=e=>s.observableArray(e.map(e=>{const t={title:e.title,id:e.id};return e.children&&(t.children=this.createNestedObservableArray(e.children)),t})),this.jsonObject=JSON.parse(i),this.observableArrayTree=this.createNestedObservableArray(this.jsonObject),this.selected=new d.KeySetImpl,this.selectedNodeTitle=s.observable(""),this.newNodeCounter=0,this.buttonText=s.observable("Add Sibling"),this.setToArray=e=>{const t=[];return e.values().forEach(e=>{t.push(e)}),t},this.data=new o(this.observableArrayTree,{keyAttributes:"id"}),this.updateNode=()=>{const e=this.setToArray(this.selected)[0];if(!e)return;const t=this.findNode(this.observableArrayTree,e),i=t.observableData()[t.index],o={title:this.selectedNodeTitle(),id:i.id};i.children&&(o.children=s.observableArray(i.children())),t.observableData.splice(t.index,1,o)},this.addChildNode=()=>{const e=this.setToArray(this.selected)[0];if(!e)return;const t=this.findNode(this.observableArrayTree,e),i=t.observableData()[t.index];this.newNodeCounter+=1;const o={title:this.selectedNodeTitle(),id:this.newNodeCounter.toString()};if(i.children)i.children.push(o);else{const e={title:i.title,id:i.id};e.children=s.observableArray([o]),t.observableData.splice(t.index,1,e)}},this.addSiblingNode=()=>{const e=this.setToArray(this.selected)[0],t=this.observableArrayTree().length;if(!e&&0!==t)return;this.newNodeCounter+=1;const s={title:this.selectedNodeTitle(),id:this.newNodeCounter.toString()};if(0!==t){const t=this.findNode(this.observableArrayTree,e);t.observableData.splice(t.index+1,0,s)}else 0===s.title.length&&(s.title="Node "+this.newNodeCounter),this.observableArrayTree.push(s),this.enableButtons()},this.removeNode=()=>{const e=this.setToArray(this.selected)[0];if(!e)return;const t=this.findNode(this.observableArrayTree,e);this.selectedNodeTitle(""),t.observableData.splice(t.index,1),this.disableButtons()},this.enableButtons=()=>{this.buttonText("Add Sibling"),document.getElementById("buttonSibling").disabled=!1,document.getElementById("buttonChild").disabled=!1,document.getElementById("buttonRemove").disabled=!1,document.getElementById("buttonUpdate").disabled=!1},this.disableButtons=()=>{0===this.observableArrayTree().length?this.buttonText("Add Node"):document.getElementById("buttonSibling").disabled=!0,document.getElementById("buttonChild").disabled=!0,document.getElementById("buttonRemove").disabled=!0,document.getElementById("buttonUpdate").disabled=!0},this.selectedChanged=e=>{const t=this.setToArray(this.selected)[0];t?this.enableButtons():this.disableButtons(),this.data.fetchByKeys({keys:new Set([t])}).then(e=>{e.results.get(t)&&this.selectedNodeTitle(e.results.get(t).data.title)})},this.findNode=(e,t)=>{const s=e();for(let i=0;i<s.length;i+=1){if(s[i].id==t){return{observableData:e,index:i}}if(s[i].children){const e=this.findNode(s[i].children,t);if(e)return e}}}}connected(){t.announce("Treeview page loaded."),document.title="Treeview"}disconnected(){}transitionCompleted(){}}}));